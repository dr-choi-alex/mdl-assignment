openapi: 3.0.2
info:
  description: Shopping Mall Demo
  title: MDL Assignment
  version: "1.0"
servers:
- url: http://localhost:4200/#/
paths:
  /product:
    description: Product Information
    get:
      description: Get Product Information
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  UserId:
                    $ref: '#/components/schemas/user'
                  Product:
                    $ref: '#/components/schemas/Product'
          description: Success Resopnse
      summary: Get the products in the store / main page
      tags:
      - product
    post:
      parameters:
      - $ref: '#/components/parameters/parameters'
        description: Add data to DB by sending product information.
        explode: true
        in: query
        name: parameters
        required: true
        schema:
          properties:
            ObjectID:
              type: string
            ProductName:
              type: string
            Price:
              type: integer
            ImagePath:
              type: string
          type: object
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Successfully added product.
                type: string
          description: Success Resopnse with path param
        "400":
          content:
            application/json:
              schema:
                example: Failed to add product.
                type: string
          description: Fail Resopnse with path param
      summary: Add a new product to the store
      tags:
      - product
  /user:
    description: Add data to DB by sending user information.
    post:
      parameters:
      - $ref: '#/components/parameters/register'
        description: Add data to DB by sending user information.
        explode: true
        in: query
        name: register
        required: true
        schema:
          properties:
            UserName:
              type: string
            UserID:
              type: string
            Password:
              type: string
            E-Mail:
              type: string
          type: object
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Alert Success to register.
                type: string
          description: Success Resopnse with path param
        "400":
          content:
            application/json:
              schema:
                example: 400 error. Fail to register.
                type: string
          description: Fail Resopnse with path param
      summary: Create User
      tags:
      - user
  /user/login:
    description: Send the user's id and password to find out appropriate DB data.
    post:
      parameters:
      - $ref: '#/components/parameters/UserID__Password'
        description: Send the user's id and password to find out appropriate DB data.
        explode: true
        in: query
        name: UserID, Password
        required: true
        schema:
          properties:
            UserID:
              type: string
            Password:
              type: string
          type: object
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  UserID:
                    type: string
          description: Success Resopnse with path param
        "400":
          content:
            application/json:
              schema:
                example: Fail to Log-in.
                type: string
          description: Fail to Log-in.
      summary: Login User
      tags:
      - user
  /user/logout:
    description: Add data to DB by sending user information.
    post:
      parameters:
      - $ref: '#/components/parameters/register_1'
        description: Add data to DB by sending user information.
        explode: true
        in: query
        name: register
        required: true
        schema:
          properties:
            UserName:
              type: string
            UserID:
              type: string
            Password:
              type: string
            E-Mail:
              type: string
          type: object
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Alert Success to register.
                type: string
          description: Success Resopnse with path param
        "400":
          content:
            application/json:
              schema:
                example: 400 error. Fail to register.
                type: string
          description: Fail Resopnse with path param
      summary: Logout User
      tags:
      - user
  /user/carts:
    description: Reads and displays user's cart information.
    get:
      parameters:
      - description: Reads and displays user's cart information.
        explode: true
        in: query
        name: shopping cart
        required: true
        schema:
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: Success Resopnse with path param
      summary: Get the user's cart information
      tags:
      - user
    put:
      parameters:
      - description: Reads and displays user's cart information.
        explode: true
        in: query
        name: shopping cart
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: Success Resopnse with path param
        "400":
          content:
            application/json:
              schema:
                example: Fail to change data.
                type: string
          description: Fail Resopnse with path param
      summary: Update the user's cart information
      tags:
      - user
  /test:
    description: Add data to DB by sending product information.
    post:
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        "201":
          description: Success Resopnse with path param
      summary: RequestBody Test
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
        application/xml:
          schema:
            $ref: '#/components/schemas/user'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/user'
            type: array
      description: List of user object zzz
  schemas:
    Product:
      example:
      - ObjectID: 3
        ProductName: car1
        Price: 1000
        ImagePath: C:\Users\jusong\Desktop\car.jpg
      - ObjectID: 4
        ProductName: car2
        Price: 2000
        ImagePath: C:\Users\jusong\Desktop\car2.jpg
      items:
        properties:
          ObjectID:
            type: integer
          ProductName:
            type: string
          Price:
            type: integer
          ImagePath:
            type: string
        type: object
      type: array
    user:
      example:
      - ObjectID: 1
        UserType: Seller
        UserName: JS
        UserID: junseok.song
        Password: cognex
        Email: junseok.song@cognex.com
        UserCartList:
          ObjectID: 3
          Count: 5
      - ObjectID: 2
        UserType: Buyer
        UserName: JH
        UserID: jihun
        Password: cognex123
        Email: jihun.pak@cognex.com
        UserCartList:
          ObjectID: 4
          Count: 6
      - ObjectID: 3
        UserType: Buyer
        UserName: DK
        UserID: daeseon
        Password: cognex456
        Email: daeseon.park@cognex.com
        UserCartList:
          ObjectID: 4
          Count: 6
      items:
        properties:
          ObjectID:
            type: integer
          UserType:
            type: string
          UserName:
            type: string
          UserID:
            type: string
          Password:
            type: string
          Email:
            type: string
          UserCartList:
            items:
              properties:
                Product:
                  $ref: '#/components/schemas/Product'
                Count:
                  type: integer
              type: object
            type: array
        type: object
      title: user
      type: array
    parameters:
      properties:
        ObjectID:
          type: string
        ProductName:
          type: string
        Price:
          type: integer
        ImagePath:
          type: string
      type: object
    register:
      properties:
        UserName:
          type: string
        UserID:
          type: string
        Password:
          type: string
        E-Mail:
          type: string
      type: object
    UserID__Password:
      properties:
        UserID:
          type: string
        Password:
          type: string
      type: object
    register_1:
      properties:
        UserName:
          type: string
        UserID:
          type: string
        Password:
          type: string
        E-Mail:
          type: string
      type: object
