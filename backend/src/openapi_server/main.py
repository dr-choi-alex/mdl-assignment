# coding: utf-8

"""
    MDL Assignment

    Shopping Mall Demo

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from cmath import log
from ntpath import join
from time import time
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from numpy import array
import uvicorn

from apis.products_api import router as ProductsApiRouter
from apis.sign_api import router as SignApiRouter
from apis.users_api import router as UsersApiRouter
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import psycopg2
import datetime

##Postgresql 연동
#db = psycopg2.connect(host='localhost', dbname='postgres',user='postgres',password='1234',port=5432)
db = psycopg2.connect(host='10.99.80.67', dbname='mdl',user='testuser',password='1234',port=5432)
cursor=db.cursor()

def execute(self,query,args={}):
    self.cursor.execute(query,args)
    row = self.cursor.fetchall()
    return row

def insertDB(table,colum,data):
    sql = " INSERT INTO {table}({colum}) VALUES ('{data}') ;".format(table=table,colum=colum,data=data)
    try:
        cursor.execute(sql)
        db.commit()
    except Exception as e :
        print(" insert DB  ",e) 
        
def readDB(table,colum, query):
    sql = " SELECT {colum} from {table} {query}".format(colum=colum,table=table, query=query)
    try:
        cursor.execute(sql)
        result = cursor.fetchall()
    except Exception as e :
        result = (" read DB err",e)
    
    return result

app = FastAPI(
    title="MDL Assignment",
    description="Shopping Mall Demo",
    version="1.0",
)
origins = [
    "http://localhost",
    "http://localhost:4200",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(ProductsApiRouter)
app.include_router(SignApiRouter)
app.include_router(UsersApiRouter)


# 준석 sample code
class User(BaseModel):
    userID: str
    password: str
    
class UserID(BaseModel):
    id: str
    userID: str
    usertype: str
    
class Register(BaseModel):
    usertype : str
    username: str
    userID : str
    password : str
    email : str

@app.post('/login')
def login(user: User):
    userID = user.userID
    password = user.password
    usertype = ""
    
    sqlLogin = "SELECT * FROM users WHERE login_id=%s and password=%s"
    cursor.execute(sqlLogin, (userID, password) )
    db.commit()
    login_info = cursor.fetchall();
    
    if login_info[0][5] == 0 :
        usertype = "seller"    
    elif login_info[0][5] == 1 :
        usertype = "buyer"
    else :
        usertype = "error"
       
    return {
        "id" : login_info[0][0],
        "userID" : userID,
        "usertype" : usertype
    }

@app.post('/register')
def register(user : Register):
    usertype = user.usertype
    username = user.username
    userID = user.userID
    password = user.password
    email = user.email
    return_value = ""
    
    try :
        sqlString = "INSERT INTO users (login_id, password, email, full_name, type) VALUES (%s, %s, %s, %s, %s);"

        cursor.execute(sqlString, (userID, password, email, username, usertype) )
        db.commit()
        print("register Successful.")
        return_value = "Success"
    
    except Exception as e :
        print(" insert DB  ",e)
        return_value = "Fail"
        db.commit()
    
    # insertDB(table="users",colum="login_id, password, email, full_name, type", data=f"{userID},{password},{email},{username},0")
    
    return return_value

@app.post('/shopping-cart')
def shoppingCart(user:UserID):
    from psycopg2.extras import RealDictCursor
    cursor = db.cursor(cursor_factory=RealDictCursor)
    product_array =[]
    id = user.id
    
    sqlCarts = "SELECT * FROM carts where user_id = %s"
  
    cursor.execute(sqlCarts, ( id ,))
    cart_info = cursor.fetchall()
    db.commit()
    print(cart_info)

    cond = ''
    arr =[]
    for i in cart_info:
        print(i.get('product_id'))
        cond = "{a} {b}, ".format(a=cond, b=i.get('product_id'))
        #arr.append(i.get('product_id'))
        
    print(cond)
    
    sqlProduct = "SELECT * FROM products where id in ({cond})".format(cond=cond[:-2])
    
    cursor.execute(sqlProduct)
    #cursor.execute(sqlProduct, (tuple(arr),))
    product_info = cursor.fetchall()
    db.commit()
        
    
    return { "product_info": product_info, "cart_info" :cart_info }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)